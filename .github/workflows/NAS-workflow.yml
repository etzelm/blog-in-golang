name: blog-in-golang-nas
# This workflow deploys blog changes from my NAS
on:
  push:
    branches:
      - 'develop'
      - 'master'
  pull_request:
  workflow_dispatch:

jobs:

  NAS-build:
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop'
    runs-on: [self-hosted, Linux, X64, nas]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        shell: bash
        run: |
          echo STARTING BUILD
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "BRANCH: $BRANCH"
          pushd realtor
          npm install
          yarn build
          popd
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o blog-in-golang .

  NAS-deploy:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    runs-on: [self-hosted, Linux, X64, nas]
    env:
      NAS_ADDR: ${{ secrets.NAS_ADDR }}
      NAS_USER: ${{ secrets.NAS_USER }}
      NAS_PASS: ${{ secrets.NAS_PASS }}
      NAS_ARGS: ${{ secrets.NAS_ARGS }}
      NAS_DIR: ${{ secrets.NAS_DIR }}
      NAS_BIN: ${{ secrets.NAS_BIN }}
      GCP_ADDR: ${{ secrets.GCP_ADDR }}
      GCP_USER: ${{ secrets.GCP_USER }}
      GCP_PASS: ${{ secrets.GCP_PASS }}
      GCP_ARGS: ${{ secrets.GCP_ARGS }}
      GCP_DIR: ${{ secrets.GCP_DIR }}
      GCP_BIN: ${{ secrets.GCP_BIN }}
      GAPI: ${{ secrets.GAPI }}
      DISTRIBUTION_ID1: ${{ secrets.DISTRIBUTION_ID1 }}
      DISTRIBUTION_ID2: ${{ secrets.DISTRIBUTION_ID2 }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Changed Build Files
        id: changed-build-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            go.mod
            go.sum
            app.go
            Dockerfile
            src/**
            templates/**
            realtor/package-lock.json
            realtor/package.json
            realtor/public/**
            realtor/src/**
            public/**
      - name: Get Changed Article Files
        id: changed-daemon-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            daemon/**
      - name: Push Article Changes
        if: steps.changed-daemon-files.outputs.any_changed == 'true'  
        shell: bash
        run: |
          echo STARTING TO PUSH CHANGES TO ARTICLES
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "BRANCH: $BRANCH"
          if [[ $BRANCH == "master" ]]
          then 
            export ARTICLES="Live-Articles"
          else 
            export ARTICLES="Test-Articles"
          fi
          echo "Articles: ${ARTICLES}"
          pushd daemon
          for i in {0..4}
            do go run app.go $i
          done
          popd
      - name: Build & Deploy
        id: deploy
        if: steps.changed-build-files.outputs.any_changed == 'true'  
        shell: bash
        run: |
          echo STARTING BUILD
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "BRANCH: $BRANCH"
          if [[ $BRANCH == "master" ]]
          then 
            TAG="latest"
          else 
            TAG="$BRANCH"
          fi
          echo "TAG: $TAG"
          echo BUILDING REACT APP
          pushd realtor
          sed -i "s/ThisIsSupposedToBeAnId/$GAPI/g" src/App.js
          sed -i "s/ThisIsSupposedToBeAnId/$GAPI/g" src/components/MyListing.js
          sed -i "s/ThisIsSupposedToBeAnId/$GAPI/g" src/components/MyListings.js
          sed -i "s/ThisIsSupposedToBeAnId/$GAPI/g" src/components/NavBar.js
          npm install
          yarn build
          popd
          echo BUILDING DOCKER IMAGE
          docker build -t blog:$TAG .
          echo DEPLOYING NAS DOCKER CONTAINER
          sshpass -p $NAS_PASS ssh $NAS_USER@$NAS_ADDR $NAS_ARGS -t "cd $NAS_DIR-$BRANCH; $NAS_BIN/docker compose up --force-recreate -d"
          if [[ $BRANCH == "master" ]]
          then 
            echo DEPLOYING GCP DOCKER CONTAINER
            docker save blog:latest > blog.tar
            scp -i ~/.ssh/gcp_rsa $GCP_ARGS blog.tar $GCP_USER@$GCP_ADDR:$GCP_DIR.
            ssh -i ~/.ssh/gcp_rsa $GCP_ARGS $GCP_USER@$GCP_ADDR -t "cd $GCP_DIR; $GCP_BIN/docker load --input blog.tar"
            ssh -i ~/.ssh/gcp_rsa $GCP_ARGS $GCP_USER@$GCP_ADDR -t "cd $GCP_DIR; $GCP_BIN/docker compose up --force-recreate -d"
            ssh -i ~/.ssh/gcp_rsa $GCP_ARGS $GCP_USER@$GCP_ADDR -t "cd $GCP_DIR; $GCP_BIN/docker system prune -f"
            ssh -i ~/.ssh/gcp_rsa $GCP_ARGS $GCP_USER@$GCP_ADDR -t "cd $GCP_DIR; rm -rf blog.tar"
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID1 --paths '/*'
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID2 --paths '/*'
            echo WAITING FOR INVALIDATIONS TO FINISH
            sleep 45
          fi
          docker system prune -f
      - name: Test
        if: steps.deploy.outcome == 'success' || steps.deploy.outcome == 'skipped'
        shell: bash
        run: |
          echo RUNNING TESTS TO CACHE CLOUDFRONT CONTENT
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          if [[ $BRANCH == "master" ]]
          then 
            TEST=.github/workflows/public-urls.txt
          else 
            TEST=.github/workflows/local-urls.txt
          fi
          while IFS= read -r line
          do
            echo $line
            command="curl --fail "$line" > /dev/null"
            eval "$command"
          done < $TEST
          
